## ノーマルモード
- `.(ドットコマンド)`
  ノーマルモードでのコマンド入力と、挿入モードでの変更ともう一度ノーマルモードに戻るまでの結果をマクロに記録されており、それを実行する。
- `*(アスタリスク)`
  カーソルが乗っている単語を検索。マッチ後はnで移動可能。
- 数字の上で`[数値][Ctrl+a]`もしくは`[数値][Ctrl+x]`
  カーソルが乗っている数値を加算・減算する。
- `cw`
  カーソルが乗っている箇所の単語を削除しながら挿入モードに移動。
- `dw/db/daw`
  カーソル以降の単語削除
  カーソル以前の単語削除(ただしカーソル位置の文字が残る)
  カーソルが乗っている単語削除
- `gu[motion]/gU[motion]/g~[motion]`
  小文字化
  大文字化
  小文字・大文字入れ替え
  ※guitなどitモーションつけるとタグ内部のテキストに反映する
- `>[motion]/<[motion]`
  インデントを深くする
  インデントを浅くする
- `<Shift + j>`
  改行削除
- `zz`
  今いる行を画面中央にした状態で再描画する。編集中の行の前後を表示
- `ga`
  カーソルのある文字の数値コードを確認
- `<Ctrl + [>`
  Escと同じ
- `<Ctrl + o> / <Ctrl + i>`
  さっきまでいた位置(バッファ)に戻る・進む(別のファイルでもいけるっぽい)
- `q:`
  コマンドラインウィンドウを表示。コマンドラインウィンドウではコマンド履歴を編集可能。
  編集が終わったらEnterでカーソル行のコマンドを実行。あるいは:qで終了。
  (2つコマンドを連結して再利用したい時などに便利)
  ※コマンドモードからは<Ctrl + f>でコマンドラインウィンドウを表示。
- `:read !(command)`
  Vimコマンドラインプロンプトで!をつけたコマンドはShellで実行可能。
  :readの引数でVimのシェルコマンドを実行すると、その標準出力をバッファ(ファイル)に挿入する。
- `:quitall`
  タブページも含めて全てのバッファを閉じる。

## 挿入モード
- `Ctrl + o`
  一度だけノーマルモードに入る。実行後挿入モードに戻る。(zzコマンドと併用推奨)
- `Ctrl + h/w/u`
  直前の1文字を削除
  直前の1単語を削除
  行頭までを削除
- `<Ctrl + r>[0-9]`
  ヤンクしたテキストを挿入モードで貼り付ける。数字はレジスタのアドレス。
- `<Ctrl + r>=`
  計算結果を挿入
- `<Ctrl + v>[0-9][0-9][0-9] / <Ctrl + v>u[0-9][0-9][0-9]`
  数値コードに対応する文字を入力(キーボードには無い文字を入力したい時など)
  Unicodeの文字入力
- `<Ctrl + r>" / <Ctrl + r>0`
  無名レジスタの内容を挿入
  ヤンクレジスタの内容を挿入

## 置換モード
※ビジュアルモードと組み合わせると強力
- `<Shift + r>`
  ノーマルモードで上記キーを入力すると、置換モードに入る。
  既に入力されている文字を上書きする。


## ビジュアルモード
※ある程度のノーマルモードでのコマンドは使用出来るので、cコマンドとかを実行すると選択文字列を削除しつつ挿入モードに移動出来る。
- `v / <Shift + v> / <Ctrl + v> / gv`
  ノーマルモードから文字志向ビジュアルモードに移動
  ノーマルモードから行志向ビジュアルモードに移動
  ノーマルモードからブロック志向ビジュアルモードに移動(矩形)
  直前の選択範囲を再度選択する
  ※各モード間は移動出来る
- `(選択中に)o`
  選択範囲のキャレット位置を始点・終点間で切り替える。
  (選択範囲を間違えた際、ノーマルモードに戻る事なく選び直せる)
- `vit(visually select inside the tag)`
  タグの内部を選択してくれる
- `<Ctrl + g>`
  ビジュアルモードから選択モードにトグル。この状態で文字を入力すると、選択箇所に上書きされる。このモードを進んで使用する意味はない。
- `「'<,'>」`が選択範囲という意味を持つ。
  `:'<,'>m$`とすると選択範囲をファイル末尾に移動する。
  ※範囲選択した状態でコマンドモードに移動すると自動で入力されているので楽

## コマンドラインモード
- `:[0-9],[0-9]d`
  範囲指定して行を削除。カット＆ペーストの際に行を数えなくて済む
- `:.,$`
  ファイル末尾を指定
- `:%`
  ファイル全ての行を指定。置換と組み合わせて使われる。
- `:/<html>/,/<\/html>/p`
  パターンを指定して出力する
- `:/<html>/+1,/<\/html>/-1p`
  オフセット指定も出来る
- `:[range]copy[address] / :[range]move[address]`
  :6copy.とかで6行目をカレント行の下にコピー
  (省略形はcoもしくはt。copty ToのTが由来)
  :6move.とかで6行目をカレント行の下に移動
  (省略形はm)

  ※ヤンクを上書きしたく無い時や、移動が面倒な時に有用
  ※ビジュアルモードと組み合わせると強力
- `:'<,'>normal .`
  選択した各業にノーマルモードのドットコマンドを実行
- `<Ctrl + r><Ctrl + w>`
  カーソル位置にある単語をコマンドラインのプロンプトに挿入
- `:↑ / :↓ / :[command]↑↓`
  コマンド履歴を呼び戻す。commandを入力して押せばフィルタも可能。
  /検索コマンドも同様に履歴を参照可能。
- `:f`もしくは`<Ctrl + g>`
  現在開いているファイルパスを確認

## バッファリスト/引数リスト/ウィンドウ
#### バッファリスト
vimではファイルを開くとバッファという場所に格納される
- `:buffers`もしくは`:ls`
  バッファリストの一覧を表示
  
  | 記号 | 意味                                                  |
  | ---- | ----------------------------------------------------- |
  | %    | 現在表示中のバッファ                                  |
  | #    | 代替バッファ。`:e #`もしくは`<Ctrl + ^`で切り替え可能 |
  | a    | アクティブバッファ。                                  |
- `:b[0-9]`
  指定した番号のバッファへ移動
- `:bn(next) / :bp(rev) / :bf(irst) / :bl(ast) / :b(ffuer) [0-9]`
  バッファリストの次のファイルに移動
  バッファリストの前のファイルに移動
  バッファリストの先頭に移動
  バッファリストの末尾に移動
指定されたインデックスのバッファに移動
- `<Ctrl + o> / <Ctrl + i>`
  バッファ間を前後に移動出来る。この方が早い事もある
- `:bd [0-9] /:3,5bd / :bd [range]`
  バッファ削除


#### 引数リスト
vimの引数は引数リストという場所に格納される。後からでも追加可能。バッファリストと同じような物。
- `:args`
  引数リストの一覧を表示
- `:args app/javascript/components/postEditor/items/*`
  引数リストに追加。既存の引数リストはリセットされる。
- `:next / :prev`
  バッファリスト間を移動

#### ウィンドウ
- `:split / :vs`もしくは`<Ctrl + w>s`、`<Ctrl + w>v`
  ウィンドウを水平/垂直分割。ショートカットを使うのは同一ファイルを開くときになりそう。
- `<Ctrl + w>`をn回
  アクティブなウィンドウを変更。Ctrlの長押しで何回でも変えれるので実はこれが一番早い説
- `:only`
  アクティブなウィンドウ以外のウィンドウを閉じる
- `[count]<Ctrl + w>>`、`[count]<Ctrl +w><`、`[count]<Ctrl + w>+`、`[count]<Ctrl + w>-`
  count分ウィンドウ幅を左右・上下に広げる
- `<Ctrl + w>=`
  全てのウィンドウの高さ幅を同じにする

#### タブページ
- `:tabe(dit) {filename}`
  新しいタブを開く。新しいタブで開く。
- `:tabc(lose)`
  現在のタブページとそこに格納されている全てのウィンドウを閉じる
- `:tabo(nly)`
  アクティブなタブページ以外のタブページを全て閉じる
- `[0-9]gt / [0-9]gT`
  指定番号のタブページに切り替える。番号を省略すると次(前)のタブページに切り替える。
- `:tabmove [0-9]`
  タブ位置を変更する。0なら先頭、省略すると末尾に移動。

## ファイル

- `:edit %<Tab> / :vi %<Tab>`
  `%`はアクティブなバッファにファイルパスの省略記号
  
- `:edit %:h<Tab> / :vi %:h<Tab>`
  ↑に`:h`を付けるとファイル名だけ取り除ける
  
- `:set path+=app/** / :set path+=app/*`
  `:find`でファイル名から検索をして開けるようにPATHを通す
  
- `:find {filename}`
  
  ファイル名から検索をして開く。
  ※同一ファイル名がある場合はTab補完でサジェストされたファイルから選ぶか、ディレクトリまで指定する。ディレクトリTab補完も可能。
  ※ファイル名まで入力してからTab補完をする事でフィルタをかける事も可能

- `:!mkdir -p %:h` → `:edit {NewDirPath}{NewFileName}`
  存在していないディレクトリ内のバッファをディスクに書き込もうとすると、エラーが発生する。
  ディレクトリを作成してから書き込む。
- `:w !sudo tee % > /dev/null`
  管理者権限でファイルに書き込む。ウィザードでは`l`を押してファイルを開き直す事が推奨。

## 検索

- `:vim(grep) /pattern/ ** | cw`
  プロジェクト全体に検索。
  **はカレントディレクトリの全てのファイル。**はサブディレクトリも含む全てのファイル。
  検索結果をQuickFixウィンドウに表示。
  `<Enter>`で開く。別窓で開く(水平分割)には`<Ctrl + w><Enter>`。
  ※直接垂直分割で開く方法は無いようなので`<Ctrl + w><Shift + l>`で御茶を濁す。
- `:cw`
  QuickFixウィンドウを表示
- `:close もしくは :ccl`
  QuickFixウィンドウを終了
- QuickFixウィンドウへの移動`<Ctrl + w> + j/h/k/l`
- `autocmd QuickFixCmdPost *grep* cwindow`
  `.vimrc`に記述すると、`:vimgrep /pattern/ ** | cw`の「 | cw」を省略する。

## その他
- iとa
  iは現在の文字の前に、aは後ろにカーソルを置き、挿入モードに移動
- IとA
  Iは現在の行の先頭に、Aは末尾にカーソルを置き、挿入モードに移動
- `vim {filename} +8`
  オフセットを指定する事で{filename}の8行目から開ける。
- `:set path? / :set surrixesadd?`
  `?`付けると設定値を確認出来る。

## モーション

- `ap(a paragraph)`
  段落区切り。空白のみの行も区切り対象。
- `r{char}`
  insertみたいにカーソル位置の一文字を置換する。

#### 移動

- `gj / gk / g0 / g$`
  表示行を上下に移動する(`j / k`は論理行を上下に移動する)
  表示行を先頭・末尾に移動する(`j / k`は論理行を先頭・末尾に移動する)
- `w / W`、`e`　(word, WORD, end of the current word)
  次のword/WORDの先頭に移動
  次のワードの末尾に移動
- `b`、`ge`
  前のワードの先頭に移動
  前のワードの末尾に移動
- `f{char} / ; / ,`、`F{char} / ; / ,`
  次の`{char}`を検索して移動する。`;`で進む`,`で戻る。
  前の`{char}`を検索して移動する。`;`で進む`,`で戻る。

- `t{char} / ; / ,`、`T{char} / ; / ,`
  次の`{char}`を検索して**直前**まで移動する。`;`で進む`,`で戻る。
  前の`{char}`を検索して**直前**まで移動する。`;`で進む`,`で戻る。
  ※削除(`dt`等と組み合わせると便利)

- ``m{mark} / `{mark} ``
  バッファ内のカーソル位置にマークを設定する
  バッファ内のマーク位置に移動する
  **※`{mark}`が小文字だとバッファ内のみのマーク、大文字ならバッファ間のマーク(グローバル)になる**

- **自動**マーク一覧

  | キーストローク | バッファの内容                                         |
  | -------------- | ------------------------------------------------------ |
  | ''             | 現在のファイルで直前に行われたジャンプ以前にいた場所。 |
  | ',             | 直前に変更された場所                                   |
  | '^             | 直前に挿入された場所                                   |
  | '[             | 直前に変更もしくはヤンクが行われた先頭                 |
  | ']             | 直前に変更もしくはヤンクが行われた末尾                 |
  | '<             | 直前のビジュアルな選択範囲の先頭                       |
  | '>             | 直前のビジュアルな選択範囲の末尾                       |

- `%`
  ブレース間を移動
  - ブレース間を移動前の位置は自動でマークされ、``` `` ```でジャンプ可能

#### vim-surround

Surround / delete surround / change surroundとニーモックする

- `S{brace}`
  ヴィジュアルモードで選択している範囲を`{brace}`で囲む
- `ds{brace}`
  カーソル位置にある文字列を囲んでいる`{brace}`を削除する
- `cs{pre-brace}{post-brace}`
  カーソル位置にある文字列を囲んでいる`{pre-brace}`を`{post-brace}`へ変更する

#### テキストオブジェクト

テキストオブジェクトはヴィジュアルモード・オペレータ待機モードと組み合わせると強力。

- `vi} / va}`
  `{}`の内側にカーソルがあるときに`{}`の中身を`{}`を含まずヴィジュアル選択する。
  `{}`の内側にカーソルがあるときに`{}`の中身を`{}`を含んでヴィジュアル選択する。
  ※少しややこしいが、**ヴィジュアルモード**の`i} / a}`という意味。
  ※`i} / a}`を繰り返せば選択範囲を広げる事は出来る。
  ※insideとaroundで覚える

  ```
  .pho-img {
    margin-bottom: 33px;
    img {
      width: 100%;
    }
  }
  ```

- `viw / vaw / viW / viA / vis / vas / vip / vap`
  現在のword、現在のwordと前後どちらかの空白を選択
  現在のWORD、現在のWORDと前後どちらかの空白を選択
  現在の文、現在の文と前後どちらかの空白を選択
  現在の段落、現在の段落と前後どちらかの空白を選択

- `ci"`
  `"`で囲まれている部分を削除して挿入モードへ移動。(テキストオブジェクトはオペレータ待機モードで使用できる)

- `cit / yit / dit`
  タグ内の文字列を削除して挿入モードへ移動。
  タグ内の文字列をヤンク。
  タグ内の文字列を削除。

## ジャンプ

- `:jumps`

  ジャンプリストの内容を表示

- `gf`
  カーソル位置にある文字列のファイル名のファイルへジャンプ(不安定？)
  ※`require`等で指定しているファイルパスを利用すると便利
  ※サフィックスが必要な場合は`:set suffixesadd+=.rb`を実行する

- `:changes`
  変更リストの一覧を表示

- `g; / g,`
  変更リストを遡る
  遡った変更リストを進む

- `gi`
  直前の変更位置に戻り、挿入モードに移動する

- 

  | キーストローク | 自動マークの内容               |
  | -------------- | ------------------------------ |
  | `.             | 直前に行われた変更の位置       |
  | `^             | 直前の挿入モードから抜けた位置 |

  ※`g; / g,`は```.``を参照し、`gi`は`` `^ ``を参照することで実現している

## レジストリ

- `x / s / c{motion}  / d{motion}`
  レジスタを指定しない場合は無名レジスタが上書きされる

- `y{motion}`
  レジスタを指定しない場合は無名レジスタと**ヤンクレジスタ**が上書きされる。
- `"0p / "0P`
  ヤンクレジスタを指定してペースト

- `("")p / ("")P`
  無名レジストリの内容をカーソルの直後・直前にペースト

- `"[a-z]y`

  レジスタを指定してヤンクする

- `"[a-z]p / "[a-z]P`

  レジスタを指定してペーストする

- `:reg "0 / :reg "a`
  ヤンクレジスタの内容を確認する
  名前付きレジスタの内容を確認する

  - | キーストローク                | レジスタ内容                   |
    | ----------------------------- | ------------------------------ |
    | "%                            | 現在のファイルのファイル名     |
    | "#                            | 代替バッファのファイル名       |
    | ".                            | 直前に挿入されたテキスト       |
    | ":                            | 直前に実行されたExコマンド     |
    | "/                            | 直前に検索された検索パターン   |
    | "+<br />(Consoleでは"*と表示) | システムレベルのクリップボード |

- `p / P`

  - 文字単位のテキスト領域の場合
    カーソル位置の直前に挿入 / カーソル位置の直後に挿入
  - 行単位のテキスト領域の場合
    カーソル行の下の行に挿入 / カーソル行の上の行に挿入
    `gp / gP`は更に、挿入後のカーソル位置が先頭か末尾か変わる

- `:set pastetoggle=<f5>`
  ※`paste`オプションをf5キーでトグルする。インデントを含むシステムレベルのクリップボード内容を`autoindent`を無効化して貼り付ける。
  ※`paste`オプションを有効化すると挿入モード時のキーマッピングや省略記法等の多くの設定を無効化出来る。

